generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  username  String     @map("name")
  role      String     @default("user") // user, admin
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relaciones
  favorites Favorite[]

  @@map("users")
}

model Dealer {
  id             String          @id @default(cuid())
  name           String
  location       String
  address        String
  phone          String
  email          String
  status         String          @default("Activo")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  vehicleDealers VehicleDealer[]
  vehicles       Vehicle[]       @relation("DealerVehicles")
  whatsappLeads  WhatsAppLead[]

  @@map("dealers")
}

model Vehicle {
  id             String          @id @default(cuid())
  brand          String
  model          String
  year           Int
  price          Float
  type           String
  vehicleType    String
  fuelType       String
  history        String?
  wiseCategories String?
  specifications String
  reviewVideoUrl String?
  status         String          @default("Disponible")
  isTrending     Boolean         @default(false)
  trendingOrder  Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  favorites      Favorite[]
  vehicleDealers VehicleDealer[]
  images         VehicleImage[]
  dealers        Dealer[]        @relation("DealerVehicles")
  whatsappLeads  WhatsAppLead[]

  @@map("vehicles")
}

model VehicleImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  type      String   @default("gallery")
  order     Int      @default(0)
  isThumbnail Boolean @default(false)
  vehicleId String
  createdAt DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_images")
}

model VehicleDealer {
  id          String   @id @default(cuid())
  vehicleId   String
  dealerId    String
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  dealer      Dealer   @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@unique([vehicleId, dealerId])
  @@map("vehicle_dealers")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  vehicleId String
  createdAt DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, vehicleId], map: "favorites_user_vehicle_unique")
  @@map("favorites")
}

model WhatsAppLead {
  id           String    @id @default(cuid())
  name         String
  username     String?
  email        String?
  phone        String?
  vehicleId    String?
  vehicleBrand String?
  vehicleModel String?
  dealershipId String?
  dealershipName String?
  status       String    @default("Nuevo") // Nuevo, Contactado, Interesado, Vendido, Perdido
  message      String?   // Mensaje completo enviado por WhatsApp
  source       String    @default("website") // website, specific_dealership, home_delivery
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  vehicle      Vehicle?  @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  dealership   Dealer?   @relation(fields: [dealershipId], references: [id], onDelete: SetNull)

  @@map("whatsapp_leads")
}
